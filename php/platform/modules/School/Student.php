<?php
namespace School;

require_once __DIR__.'/StudentJsonConverter.php';
require_once __DIR__.'/StudentArrayConverter.php';

/**
 * Generated from NGS DSL
 *
 * @property string $URI a unique object identifier (read-only)
 * @property int $ID autogenerated by server (read-only)
 * @property string $firstName a string
 * @property string $lastName a string
 * @property string $name a string, will be calculated by server (read-only)
 * @property \NGS\LocalDate $birthdate a date
 *
 * @package School
 * @version 0.9.6a
 */
class Student extends \NGS\Patterns\AggregateRoot implements \IteratorAggregate
{
    protected $URI;
    protected $ID;
    protected $firstName;
    protected $lastName;
    protected $name;
    protected $birthdate;

    /**
     * Constructs object using a key-property array or instance of class "School\Student"
     *
     * @param array|void $data key-property array or instance of class "School\Student" or pass void to provide all fields with defaults
     */
    public function __construct($data = array(), $construction_type = '')
    {
        if(is_array($data) && $construction_type !== 'build_internal') {
            foreach($data as $key => $val) {
                if(in_array($key, self::$_read_only_properties))
                    throw new \LogicException($key.' is a read only property and can\'t be set through the constructor.');
            }
        }
        if (is_array($data)) {
            $this->fromArray($data);
        } else {
            throw new \InvalidArgumentException('Constructor parameter must be an array! Type was: '.\NGS\Utils::getType($data));
        }
    }

    /**
     * Supply default values for uninitialized properties
     *
     * @param array $data key-property array which will be filled in-place
     */
    private static function provideDefaults(array &$data)
    {
        if(!array_key_exists('URI', $data))
            $data['URI'] = null; //a string representing a unique object identifier
        if(!array_key_exists('ID', $data))
            $data['ID'] = 0; // an integer number
        if(!array_key_exists('firstName', $data))
            $data['firstName'] = ''; // a string
        if(!array_key_exists('lastName', $data))
            $data['lastName'] = ''; // a string
        if(!array_key_exists('name', $data))
            $data['name'] = ''; // a string
        if(!array_key_exists('birthdate', $data))
            $data['birthdate'] = new \NGS\LocalDate(); // a date
    }

    /**
     * Constructs object from a key-property array
     *
     * @param array $data key-property array
     */
    private function fromArray(array $data)
    {
        $this->provideDefaults($data);

        if(isset($data['URI']))
            $this->URI = \NGS\Converter\PrimitiveConverter::toString($data['URI']);
        unset($data['URI']);
        if (array_key_exists('ID', $data))
            $this->setID($data['ID']);
        unset($data['ID']);
        if (array_key_exists('firstName', $data))
            $this->setFirstName($data['firstName']);
        unset($data['firstName']);
        if (array_key_exists('lastName', $data))
            $this->setLastName($data['lastName']);
        unset($data['lastName']);
        if (isset($data['name']))
            $this->name = \NGS\Converter\PrimitiveConverter::toString($data['name']);
        unset($data['name']);
        if (array_key_exists('birthdate', $data))
            $this->setBirthdate($data['birthdate']);
        unset($data['birthdate']);

        if (count($data) !== 0 && \NGS\Utils::WarningsAsErrors())
            throw new \InvalidArgumentException('Superflous array keys found in "School\Student" constructor: '.implode(', ', array_keys($data)));
    }

// ============================================================================

    /**
     * Helper getter function, body for magic method $this->__get('URI')
     * URI is a string representation of the primary key.
     *
     * @return string unique resource identifier representing this object
     */
    public function getURI()
    {
        return $this->URI;
    }

    /**
     * @return an integer number
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * @return a string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * @return a string
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * @return a string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * @return a date
     */
    public function getBirthdate()
    {
        return $this->birthdate;
    }

    /**
     * Property getter which throws Exceptions on invalid access
     *
     * @param string $name Property name
     *
     * @return mixed
     */
    public function __get($name)
    {
        if ($name === 'URI')
            return $this->getURI(); // a string representing a unique object identifier
        if ($name === 'ID')
            return $this->getID(); // an integer number
        if ($name === 'firstName')
            return $this->getFirstName(); // a string
        if ($name === 'lastName')
            return $this->getLastName(); // a string
        if ($name === 'name')
            return $this->getName(); // a string
        if ($name === 'birthdate')
            return $this->getBirthdate(); // a date

        throw new \InvalidArgumentException('Property "'.$name.'" in class "School\Student" does not exist and could not be retrieved!');
    }

// ============================================================================

    /**
     * Property existence checker
     *
     * @param string $name Property name to check for existence
     *
     * @return bool will return true if and only if the propery exist and is not null
     */
    public function __isset($name)
    {
        if(in_array($name, self::$_read_only_properties))
            return true;
        if ($name === 'firstName')
            return true; // a string (always set)
        if ($name === 'lastName')
            return true; // a string (always set)
        if ($name === 'name')
            return true; // a string (always set)
        if ($name === 'birthdate')
            return true; // a date (always set)

        return false;
    }

    private static $_read_only_properties = array('URI', 'ID', 'name');

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    private function setID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "ID" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->ID = $value;
        return $value;
    }

    /**
     * @param string $value a string
     *
     * @return string
     */
    public function setFirstName($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "firstName" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toString($value);
        $this->firstName = $value;
        return $value;
    }

    /**
     * @param string $value a string
     *
     * @return string
     */
    public function setLastName($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "lastName" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toString($value);
        $this->lastName = $value;
        return $value;
    }

    /**
     * @param \NGS\LocalDate $value a date
     *
     * @return \NGS\LocalDate
     */
    public function setBirthdate($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "birthdate" cannot be set to null because it is non-nullable!');
        $value = new \NGS\LocalDate($value);
        $this->birthdate = $value;
        return $value;
    }

    /**
     * Property setter which checks for invalid access to entity properties and enforces proper type checks
     *
     * @param string $name Property name
     * @param mixed $value Property value
     */
    public function __set($name, $value)
    {
        if(in_array($name, self::$_read_only_properties))
            throw new \LogicException('Property "'.$name.'" in "School\Student" cannot be set, because it is read-only!');
        if ($name === 'firstName')
            return $this->setFirstName($value); // a string
        if ($name === 'lastName')
            return $this->setLastName($value); // a string
        if ($name === 'birthdate')
            return $this->setBirthdate($value); // a date
        throw new \InvalidArgumentException('Property "'.$name.'" in class "School\Student" does not exist and could not be set!');
    }

    /**
     * Will unset a property if it exists, but throw an exception if it is not nullable
     *
     * @param string $name Property name to unset (set to null)
     */
    public function __unset($name)
    {
        if(in_array($name, self::$_read_only_properties))
            throw new \LogicException('Property "'.$name.'" cannot be unset, because it is read-only!');
        if ($name === 'firstName')
            throw new \LogicException('The property "firstName" cannot be unset because it is non-nullable!'); // a string (cannot be unset)
        if ($name === 'lastName')
            throw new \LogicException('The property "lastName" cannot be unset because it is non-nullable!'); // a string (cannot be unset)
        if ($name === 'birthdate')
            throw new \LogicException('The property "birthdate" cannot be unset because it is non-nullable!'); // a date (cannot be unset)
    }

    /**
     * Create or update School\Student instance
     *
     * @return modified instance object
     */
    public function persist()
    {
        $newObject = parent::persist();
        $this->URI = $newObject->URI;
        $this->ID = $newObject->ID;
        $this->name = $newObject->name;
        return $this;
    }

    public function toJson()
    {
        return \School\StudentJsonConverter::toJson($this);
    }

    public static function fromJson($item)
    {
        return \School\StudentJsonConverter::fromJson($item);
    }

    public function __toString()
    {
        return 'School\Student'.$this->toJson();
    }

    public function __clone()
    {
        return \School\StudentArrayConverter::fromArray(\School\StudentArrayConverter::toArray($this));
    }

    public function toArray()
    {
        return \School\StudentArrayConverter::toArray($this);
    }

    /**
     * Implementation of the IteratorAggregate interface via \ArrayIterator
     *
     * @return Traversable a new iterator specially created for this iteratation
     */
    public function getIterator()
    {
        return new \ArrayIterator(\School\StudentArrayConverter::toArray($this));
    }

    /**
     * Find data using declared specification getShortPeople
     * Search can be limited by $limit and $offset integer arguments
     *
     * @return array of objects that satisfy specification
     */
    public static function getShortPeople($nameLimit, $limit = null, $offset = null)
    {
        require_once __DIR__.'/Student/getShortPeople.php';
        $specification = new \School\Student\getShortPeople(array('nameLimit' => $nameLimit));
        return $specification->search($limit, $offset);
    }
}